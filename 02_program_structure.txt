:chap_num: 2
:prev_link: 01_values
:next_link: 03_functions

= Estructura del Programa =

[chapterquote="true"]
[quote, _why, Why's (Poignant) Guide to Ruby]
____
Y mi corazón brilla rojo debajo de mi
delgada, translúcida piel y tienen que administrarme 10cc de JavaScript
para hacerme regresar. (Responsdo bien a las toxinas en la sangre.) ¡Hombre,
esa cosa te sacará de tus casillas!
____

(((why)))(((Poignant Guide)))En este capítulo, vamos a empezar a hacer
cosas que realmente pueden ser llamadas _programación_. Vamos a ampliar
nuestro conocimiento del lenguaje JavaScript, más allá de los sustantivos
y fragmentos de oraciones que hemos visto hasta ahora,
hasta el punto en que podamos expresar alguna prosa significativa.

== Expresiones y declaraciones ==

(((grammar)))(((syntax)))(((code,structure
of)))(((grammar)))(((JavaScript,syntax)))En el
link:01_values.html#values[Capítulo 1], creamos algunos valores y después
les aplicamos operadores para obtener nuevos valores. Creando valores como éste
es una parte esencial de cada programa de JavaScript, pero esto es sólo
una parte.

(((literal expression)))Un fragmento de código que produce un valor es
llamado una _((expresión))_. Cada valor que se escribe literalmente
(tal como `22` o `"psicoanálisis"`) es una expresión. Una expresión
entre ((paréntesis)) es también una expresión, como es un ((operador
binario)) aplicado a dos expresiones o un operador unario aplicado a
uno.

(((nesting,of expressions)))(((human language)))Esto muestra parte de la
belleza de una interfaz basada en el lenguaje. Las expresiones se puede anidar en una forma
muy similar a la forma de sub-frases en la que las lenguas humanas son anidada, y
las sub-frase puede contener sus propias sub-frases, etc. Esto nos permite
combinar expresiones para expresar cálculos arbitrariamente complejos.

(((statement)))(((semicolon)))(((program)))Si una expresión
corresponde a un fragmento de frase, una _declaración_ en JavaScript
corresponde a una frase completa en un lenguaje humano. Un programa es
simplemente una lista de declaraciones.

(((syntax)))El tipo más simple de declaración es una expresión con un
punto y coma después de ella. Se trata de un programa:

[source,javascript]
----
1;
!false;
----

Es un programa inútil, sin embargo. Una ((expresión)) puede ser contenida
solo de producir un valor, que puede entonces ser utilizado por the "enclosing
expression". Una ((declaración)) destaca por su cuenta y que equivale a algo
sólo si afecta al mundo. Se podría mostrar algo en la
pantalla que cuenta como cambiar el mundo o podría cambiar el
estado interno de la máquina de una manera que afectará los estados
que vienen despues de él. Estos cambios se llaman _((efecto colateral))s_. Las
declaraciones en el ejemplo anterior solo producen los valores `1` y
`verdadero` y después los tiran inmediatamente. Esto no deja ninguna impresión
en el mundo en absoluto. Al ejecutar el programa, nada observable
sucede.

(((programming style)))(((automatic semicolon
insertion)))(((semicolon)))En algunos casos, JavaScript le permite
omitir el punto y coma al final de una instrucción. En otros casos, tiene que
estar allí, o el siguiente ((linea)) serán tratados como parte de la misma
declaración. Las reglas para cuando se puede omitir con seguridad son algo
complejo y propenso a errores. En este libro, cada declaración que necesita un
punto y coma siempre será terminada por uno. Te recomiendo que hagas lo
misma en sus propios programas, al menos hasta que haya aprendido más sobre
sutilezas involucradas en omitir el punto y coma.

== Variables ==

(((syntax)))(((variable,definition)))(((side effect)))(((memory))) ¿Cómo
un programa de mantener un estado ((estado))? ¿Cómo recuerda
cosas? Hemos visto cómo producir nuevos valores de viejos valores, pero
esto no cambia los valores antiguos, y el nuevo valor tiene que ser
inmediatamente utilizado o se disipará de nuevo. Para atrapar y mantener los valores,
JavaScript proporciona una cosa llamada _variable_.

[source,javascript]
----
var caught = 5 * 5;
----

(((var keyword)))Y eso nos da nuestra segunda clase de ((declaración)).
La palabra especial (_((keyword))_) `var` indica que esta frase
va a definir una variable. Es seguido por el nombre de la variable
y, si queremos dar de inmediato un valor, con un operador de `=` y
una expresión.

La declaración anterior crea una variable llamada `caught` y se usa
para agarrar el número que se produce al multiplicar 5 por 5.

Después de que una variable se ha definido, su nombre puede ser usado como una
((expresión)). El valor de esa expresión es el valor que la
variable alberga actualmente. He aquí un ejemplo:

[source,javascript]
----
var ten = 10;
console.log(ten * ten);
// → 100
----

(((subrayar el carácter)))(((signo de
dólar)))(((variable,naming)))Los nombres de variables pueden ser cualquier palabra que no es
una palabra reservada (tal como `var`). Ellos no pueden incluir espacios.
Dígitos también pueden ser parte de la variable nombre—`catch22` es un nombre válido,
por ejemplo-, pero el nombre no debe comenzar con un dígito. Un nombre de variable
no puede incluir puntuacion, a excepción de los caracteres `$` y `_`.

(((= operator)))(((assignment)))(((variable,assignment))Cuando una
variable apunta a un valor, eso no quiere decir que está ligado a ese
valor para siempre. El operador de `=` se puede utilizar en cualquier momento en variables
existentes para desconectarlas de su valor actual y etenerlas
apuntando a una nueva.

[source,javascript]
----
var mood = "light";
console.log(mood);
// → light
mood = "dark";
console.log(mood);
// → dark
----

(((variable,modelo of)))(((tentáculo (analogía)))) Debieras
imaginar variables como tentáculos, en lugar de las cajas. Ellas no
_contienen _ valores; ellas _grasp_ them—two variables pueden referirse la
mismo valor. Un programa puede acceder sólo los valores que todavía tiene a
hold on. Cuando usted necesita recordar algo, haces crecer un tentáculo para
afferarse a ello or you reattach one of your existing tentacles to it.

image::img/octopus.jpg[alt="Variables as tentacles"]

Veamos un ejemplo. Para recordar el número de dólares que Luigi
aún te debe, se crea una variable. Y luego, cuando él te paga $ 35,
tu das a esta variable un valor nuevo.

[source,javascript]
----
var luigisDebt = 140;
luigisDebt = luigisDebt - 35;
console.log(luigisDebt);
// → 105
----

(((indefinido)))Cuando se define una variable sin darle un valor,
el tentáculo no tiene nada de que enteder, por lo que termina en el aire. Si le preguntas
por el valor de una variable vacía, obtendrá el valor de `undefined (indefinido)`.

(((var keyword)))Una sola `var` declaración puede definir múltiples
variables. Las definiciones deben estar separados por comas.

[source,javascript]
----
var one = 1, two = 2;
console.log(one + two);
// → 3
----

== Palabras clave y palabras reservadas ==

(((syntax)))(((implementos (palabra reservada))))(((interfaz (palabra
reservada))))(((dejar palabras clave)))(((paquete (palabra reservada))))(((privado
(palabra reservada))))(((protegido (palabra reservada))))(((publico (palabra
reservada))))(((statico (palabra reservada))))(((operador vacío)))(((yield
(palabra reservada))))(((palabra reservada)))(((variable,naming)))Palabras con
un significado especial, como `var`, son _((palabra reservada))s_, y no se pueden ser
utilizadas como nombres de variables. También hay un número de palabras que son
“reservado para uso” en ((futuras)) versiones de JavaScript. Estos también
oficialmente no pueden ser utilizados como nombres de variables, aunque algunos
entornos de JavaScript hacen que puedan. La lista completa de palabras clave y
palabras reservadas es bastante larga.

[source,text/plain]
----
break case catch class const continue debugger
default delete do else enum export extends false
finally for function if implements import in
instanceof interface let new null package private
protected public return static super switch this
throw true try typeof var void while with yield
----

No te preocupes por la memorización de estos, pero recuerda que esto podría ser
el problema cuando una definición de variable no funciona como se esperaba.

== El entorno ==

(((standard environment)))The collection of variables and their values
that exist at a given time is called the _((environment))_. When a
program starts up, this environment is not empty. It always contains
variables that are part of the language ((standard)), and most of the
time, it has variables that provide ways to interact with the
surrounding system. For example, in a ((browser)), there are variables
and functions to inspect and influence the currently loaded website
and to read ((mouse)) and ((keyboard)) input.

== Functions ==

indexsee:[application (of functions),function application]
indexsee:[invoking (of functions),function application]
indexsee:[calling (of functions),function application]
(((output)))(((function)))(((function,application)))(((alert
function)))(((message box)))A lot of the values provided in the
default environment have the type _((function))_. A function is a
piece of program wrapped in a value. Such values can be _applied_ in
order to run the wrapped program. For example, in a ((browser))
environment, the variable `alert` holds a function that shows a little
((dialog box)) with a message. It is used like this:

[source,javascript]
----
alert("Good morning!");
----

image::img/alert.png[alt="An alert dialog",width="8cm"]

(((parameter)))(((function,application)))Executing a function is
called _invoking_, _calling_, or _applying_ it. You can call a
function by putting ((parentheses)) after an expression that produces a
function value. Usually you'll directly use the name of the variable
that holds the function. The values between the parentheses are given to
the program inside the function. In the example, the `alert` function
uses the string that we give it as the text to show in the dialog box.
Values given to functions are called _((argument))s_. The `alert`
function needs only one of them, but other functions might need a
different number or different types of arguments.

== The console.log function ==

(((JavaScript console)))(((developer
tools)))(((Node.js)))(((console.log)))(((output)))The `alert` function
can be useful as an output device when experimenting, but clicking
away all those little windows will get on your nerves. In past
examples, we've used `console.log` to output values. Most JavaScript
systems (including all modern web ((browser))s and Node.js) provide a
`console.log` function that writes out its arguments to _some_ text
output device. In browsers, the output lands in the ((JavaScript
console)). This part of the browser interface is hidden by default,
but most browsers open it when you press F12 or, on Mac, when you
press Command-Option-I. If that does not work, search through the
menus for an item named “web console” or “developer tools”.

ifdef::interactive_target[]

When running the examples, or your own code, on the pages of this
book, `console.log` output will be shown after the example, instead of
in the browser's JavaScript console.

endif::interactive_target[]

[source,javascript]
----
var x = 30;
console.log("the value of x is", x);
// → the value of x is 30
----

(((object)))Though ((variable)) names cannot contain ((period
character))s, `console.log` clearly has one. This is because
`console.log` isn't a simple variable. It is actually an expression
that retrieves the `log` ((property)) from the value held by the
`console` variable. We will find out exactly what this means in
link:04_data.html#properties[Chapter 4].

[[return_values]]
== Return values ==

(((comparison,of numbers)))(((return value)))(((Math.max
function)))(((maximum)))Showing a dialog box or writing text to
the screen is a _((side effect))_. A lot of functions are useful
because of the side effects they produce. Functions may also produce
values, and in that case, they don't need to have a side effect to be
useful. For example, the function `Math.max` takes any number of
number values and gives back the greatest.

[source,javascript]
----
console.log(Math.max(2, 4));
// → 4
----

(((function,application)))(((minimum)))(((Math.min
function)))When a function produces a value, it is said to _return_
that value. Anything that produces a value is an ((expression)) in
JavaScript, which means function calls can be used within larger
expressions. Here a call to `Math.min`, which is the opposite of
`Math.max`, is used as an input to the plus operator:

[source,javascript]
----
console.log(Math.min(2, 4) + 100);
// → 102
----

The link:03_functions.html#functions[next chapter] explains how to
write your own functions.

== prompt and confirm ==

(((dialog box)))(((input)))(((browser)))(((confirm function)))Browser
environments contain other functions besides `alert` for popping up
windows. You can ask the user an OK/Cancel question using
`confirm`. This returns a Boolean: `true` if the user clicks OK and
`false` if the user clicks Cancel.

[source,javascript]
----
confirm("Shall we, then?");
----

image::img/confirm.png[alt="A confirm dialog",width="8cm"]

(((input)))(((prompt function)))(((text input)))The `prompt` function
can be used to ask an “open” question. The first argument is the
question, the second one is the text that the user starts with. A line
of text can be typed into the dialog window, and the function will
return this text as a string.

[source,javascript]
----
prompt("Tell me everything you know.", "...");
----

image::img/prompt.png[alt="An prompt dialog",width="8cm"]

These two functions aren't used much in modern web programming, mostly
because you have no control over the way the resulting windows look,
but they are useful for toy programs and experiments.

== Control flow ==

(((execution order)))(((program)))(((control flow)))When your program
contains more than one ((statement)), the statements are executed,
predictably, from top to bottom. As a basic example, this program has
two statements. The first one asks the user for a number, and the
second, which is executed afterward, shows the ((square)) of that
number.

[source,javascript]
----
var theNumber = Number(prompt("Pick a number", ""));
alert("Your number is the square root of " +
      theNumber * theNumber);
----

(((number,conversion to)))(((type coercion)))(((Number
function)))(((String function)))(((Boolean
function)))(((Boolean,conversion to)))The function `Number` converts a
value to a number. We need that conversion because the result of
`prompt` is a string value, and we want a number. There are similar
functions called `String` and `Boolean` that convert values to those
types.

Here is the rather trivial schematic representation of straight
control flow:

image::img/controlflow-straight.svg[alt="Trivial control flow",width="4cm"]

== Conditional execution ==

(((Boolean)))(((control flow)))Executing statements in straight-line
order isn't the only option we have. An alternative is _((conditional
execution))_, where we choose between two different routes based on a
Boolean value, like this:

image::img/controlflow-if.svg[alt="Conditional control flow",width="4cm"]

(((syntax)))(((Number function)))(((if keyword)))Conditional execution
is written with the `if` keyword in JavaScript. In the simple case, we
just want some code to be executed if, and only if, a certain
condition holds. For example, in the previous program, we might want
to show the square of the input only if the input is actually a
number.

[source,javascript]
----
var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
  alert("Your number is the square root of " +
        theNumber * theNumber);
----

With this modification, if you enter “cheese”, no output will be shown.

The keyword `if` executes or skips a statement depending on the value
of a Boolean expression. The deciding expression is written after the
keywords, between ((parentheses)), followed by the statement to execute.

(((isNaN function)))The `isNaN` function is a standard JavaScript
function that returns `true` only if the argument it is given is
`NaN`. The `Number` function happens to return `NaN` when you give it
a string that doesn't represent a valid number. Thus, the condition
translates to “unless `theNumber` is not-a-number, do this”.

(((else keyword)))You often won't just have code that executes when a
condition holds true, but also code that handles the other case. This
alternate path is represented by the second arrow in the
diagram. The `else` keyword can be used, together with `if`, to create
two separate, alternative execution paths.

[source,javascript]
----
var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
  alert("Your number is the square root of " +
        theNumber * theNumber);
else
  alert("Hey. Why didn't you give me a number?");
----

(((if keyword,chaining)))If we have more than two paths to choose
from, multiple `if`/`else` pairs can be “chained” together. Here's an
example:

[source,javascript]
----
var num = Number(prompt("Pick a number", "0"));

if (num < 10)
  alert("Small");
else if (num < 100)
  alert("Medium");
else
  alert("Large");
----

The program will first check whether `num` is less than 10. If it is,
it chooses that branch, shows `"Small"`, and is done. If it isn't, it
takes the `else` branch, which itself contains a second `if`. If the
second condition (`< 100`) holds, that means the number is between 10
and 100, and `"Medium"` is shown. If it doesn't, the second, and last,
`else` branch is chosen.

The flow chart for this program looks something like this:

image::img/controlflow-nested-if.svg[alt="Nested if control flow",width="4cm"]

[[loops]]
== while and do loops ==

(((even number)))Consider a program that prints all even numbers from
0 to 12. One way to write this is as follows:

[source,javascript]
----
console.log(0);
console.log(2);
console.log(4);
console.log(6);
console.log(8);
console.log(10);
console.log(12);
----

(((control flow)))That works, but the idea of writing a program is to
make something _less_ work, not more. If we needed all even numbers
less than 1,000, the previous would be unworkable. What we need is a
way to repeat some code. This form of control flow is called a
_((loop))_:

image::img/controlflow-loop.svg[alt="Loop control flow",width="4cm"]

(((syntax)))(((counter variable)))Looping control flow allows us to go
back to some point in the program where we were before and repeat it
with our current program state. If we combine this with a variable
that counts, we can do something like this:

[source,javascript]
----
var number = 0;
while (number <= 12) {
  console.log(number);
  number = number + 2;
}
// → 0
// → 2
//   … etcetera
----

(((while loop)))(((Boolean)))A ((statement)) starting with the
keyword `while` creates a loop. The word `while` is followed by an
((expression)) in ((parentheses)) and then a statement, much like `if`.
The loop executes that statement as long as the expression produces a
value that is `true` when converted to Boolean type.

(((grouping)))((({} (block))))(((block)))In this loop, we want to both
print the current number and add two to our variable. Whenever we need
to execute multiple ((statement))s inside a loop, we wrap them in
((curly braces)) (`{` and `}`). Braces do for statements what
((parentheses)) do for expressions: they group them together, making
them count as a single statement. A sequence of statements wrapped in
braces is called a _block_.

(((programming style)))Many JavaScript programmers wrap every single
loop or `if` body in braces. They do this both for the sake of
consistency and to avoid having to add or remove braces when changing
the number of statements in the body later. In this book, I will write
most single-statement bodies without braces, since I value brevity.
You are free to go with whichever style you prefer.

(((comparison)))(((state)))The variable `number` demonstrates the way
a ((variable)) can track the progress of a program. Every time the
loop repeats, `number` is incremented by `2`. Then, at the beginning
of every repetition, it is compared with the number `12` to decide
whether the program has done all the work it intended to do.

(((exponentiation)))As an example that actually does something useful,
we can now write a program that calculates and shows the value of
2^10^ (2 to the 10th power). We use two variables: one to keep
track of our result and one to count how often we have multiplied this
result by 2. The loop tests whether the second variable has reached 10
yet and then updates both variables.

[source,javascript]
----
var result = 1;
var counter = 0;
while (counter < 10) {
  result = result * 2;
  counter = counter + 1;
}
console.log(result);
// → 1024
----

The counter could also start at `1` and check for `<= 10`, but, for
reasons that will become apparent in
link:04_data.html#array_indexing[Chapter 4], it is a good idea to get
used to counting from 0.

(((loop body)))(((do loop)))(((control flow)))The `do` loop is a
control structure similar to the `while` loop. It differs only on one
point: a `do` loop always executes its body at least once, and it
starts testing whether it should stop only after that first execution.
To reflect this, the test appears after the body of the loop:

[source,javascript]
----
do {
  var name = prompt("Who are you?");
} while (!name);
console.log(name);
----

(((Boolean,conversion to)))(((! operator)))This program will
force you to enter a name. It will ask again and again until it gets
something that is not an empty string. Applying the `!` operator will
convert a value to Boolean type before negating it, and all strings
except `""` convert to `true`.

== Indenting Code ==

(((block)))(((code structure)))(((whitespace)))(((programming
style)))You've probably noticed the spaces I put in front of some
statements. In JavaScript, these are not required—the computer will
accept the program just fine without them. In fact, even the ((line))
breaks in programs are optional. You could write a program as a single
long line if you felt like it. The role of the ((indentation)) inside
blocks is to make the structure of the code stand out. In complex
code, where new blocks are opened inside other blocks, it can become
hard to see where one block ends and another begins. With proper
indentation, the visual shape of a program corresponds to the shape of
the blocks inside it. I like to use two spaces for every open block,
but tastes differ—some people use four spaces, and some people use
((tab character))s.

== for loops ==

(((syntax)))(((while loop)))(((counter variable)))Many loops follow
the pattern seen in the previous `while` examples. First, a “counter”
variable is created to track the progress of the loop. Then comes a
`while` loop, whose test expression usually checks whether the counter
has reached some boundary yet. At the end of the loop body, the
counter is updated to track progress.

(((for loop)))(((loop)))Because this pattern is so common, JavaScript and
similar languages provide a slightly shorter and more comprehensive
form, the `for` loop.

[source,javascript]
----
for (var number = 0; number <= 12; number = number + 2)
  console.log(number);
// → 0
// → 2
//   … etcetera
----

(((control flow)))(((state)))This program is exactly equivalent to the
link:02_program_structure.html#loops[earlier] even-number-printing
example. The only change is that all the ((statement))s that are
related to the “state” of the loop are now grouped together.

The ((parentheses)) after a `for` keyword must contain two
((semicolon))s. The part before the first semicolon _initializes_ the
loop, usually by defining a ((variable)). The second part is the
((expression)) that _checks_ whether the loop must continue. The final
part _updates_ the state of the loop after every iteration. In most
cases, this is shorter and clearer than a `while` construct.

(((exponentiation)))Here is the code that computes 2^10^, using `for`
instead of `while`:

[source,javascript]
----
var result = 1;
for (var counter = 0; counter < 10; counter = counter + 1)
  result = result * 2;
console.log(result);
// → 1024
----

(((programming style)))(((indentation)))Note that even though no block
is opened with a `{`, the statement in the loop is still indented two
spaces to make it clear that it “belongs” to the line before it.

== Breaking Out of a Loop ==

(((loop,termination of)))(((break keyword)))Having the loop's
condition produce `false` is not the only way a loop can finish. There
is a special statement called `break` that has the effect of
immediately jumping out of the enclosing loop.

This program illustrates the `break` statement. It finds the first number
that is both greater than or equal to 20 and divisible by 7.

[source,javascript]
----
for (var current = 20; ; current++) {
  if (current % 7 == 0)
    break;
}
console.log(current);
// → 21
----

(((remainder operator)))(((% operator)))Using the remainder
(`%`) operator is an easy way to test whether a number is divisible by
another number. If it is, the remainder of their division is zero.

(((for loop)))The `for` construct in the example does not have a part
that checks for the end of the loop. This means that the loop will
never stop unless the `break` statement inside is executed.

If you were to leave out that `break` statement or accidentally write
a condition that always produces `true`, your program would get stuck
in an _((infinite loop))_. A program stuck in an infinite loop will
never finish running, which is usually a bad thing.

ifdef::interactive_target[]

If you create an infinite loop in one of the examples on these pages,
you'll usually be asked whether you want to stop the script after a
few seconds. If that fails, you will have to close the tab that you're
working in, or on some browsers close your whole browser, in order to
recover.

endif::interactive_target[]

(((continue keyword)))The `continue` keyword is similar to `break`, in
that it influences the progress of a loop. When `continue` is
encountered in a loop body, control jumps out of the body and
continues with the loop's next iteration.

== Updating variables succinctly ==

(((assignment)))(((+= operator)))(((-= operator)))(((/=
operator)))(((*= operator)))(((state)))(((side effect)))Especially
when looping, a program often needs to “update” a variable to hold a
value based on that variable's previous value.

// test: no

[source,javascript]
----
counter = counter + 1;
----

JavaScript provides a shortcut for this:

// test: no

[source,javascript]
----
counter += 1;
----

Similar shortcuts work for many other operators, such as `result *= 2` to
double `result` or `counter -= 1` to count downward.

This allows us to shorten our counting example a little more.

[source,javascript]
----
for (var number = 0; number <= 12; number += 2)
  console.log(number);
----

(((++ operator)))(((-- operator)))For `counter += 1` and `counter -=
1`, there are even shorter equivalents: `counter++` and `counter--`.

== Dispatching on a value with switch ==

(((syntax)))(((conditional execution)))(((dispatching)))(((if
keyword,chaining)))It is common for code to look like this:

// test: no

[source,javascript]
----
if (variable == "value1") action1();
else if (variable == "value2") action2();
else if (variable == "value3") action3();
else defaultAction();
----

(((colon character)))(((switch keyword)))There is a construct called
`switch` that is intended to solve such a “dispatch” in a more direct
way. Unfortunately, the syntax JavaScript uses for this (which it
inherited from the C/Java line of programming languages) is somewhat
awkward—a chain of `if` statements often looks better. Here is an
example:

[source,javascript]
----
switch (prompt("What is the weather like?")) {
  case "rainy":
    console.log("Remember to bring an umbrella.");
    break;
  case "sunny":
    console.log("Dress lightly.");
  case "cloudy":
    console.log("Go outside.");
    break;
  default:
    console.log("Unknown weather type!");
    break;
}
----

(((fallthrough)))(((comparison)))(((break keyword)))(((case
keyword)))(((default keyword)))You may put any number of `case` labels
inside the block opened by `switch`. The program will jump to the
label that corresponds to the value that `switch` was given or to
`default` if no matching value is found. It starts executing
statements there, even if they're under another label, until it
reaches a `break` statement. In some cases, such as the `"sunny"` case
in the example, this can be used to share some code between cases (it
recommends going outside for both sunny and cloudy weather). But
beware: it is easy to forget such a `break`, which will cause the
program to execute code you do not want executed.

== Capitalization ==

(((capitalization)))(((variable,naming)))(((whitespace)))Variable
names may not contain spaces, yet it is often helpful to use multiple
words to clearly describe what the variable represents. These are
pretty much your choices for writing a variable name with several
words in it:

----
fuzzylittleturtle
fuzzy_little_turtle
FuzzyLittleTurtle
fuzzyLittleTurtle
----

(((camel case)))(((programming style)))(((underscore character)))The
first style can be hard to read. Personally, I like the look of the
underscores, though that style is a little painful to type. The
((standard)) JavaScript functions, and most JavaScript programmers,
follow the bottom style—they capitalize every word except the first.
It is not hard to get used to little things like that, and code with
mixed naming styles can be jarring to read, so we will just follow
this ((convention)).

(((Number function)))(((constructor)))In a few cases, such as the
`Number` function, the first letter of a variable is also capitalized.
This was done to mark this function as a constructor. What a
constructor is will become clear in
link:06_object.html#constructors[Chapter 6]. For now, the important
thing is not to be bothered by this apparent lack of ((consistency)).

== Comments ==

(((readability)))Often, raw code does not convey all the information
you want a program to convey to human readers, or it conveys it in
such a cryptic way that people might not understand it. At other
times, you might just feel poetic or want to include some thoughts as
part of your program. This is what _((comment))s_ are for.

(((slash character)))(((line comment)))A comment is a piece of text
that is part of a program but is completely ignored by the computer.
JavaScript has two ways of writing comments. To write a single-line
comment, you can use two slash characters (`//`) and then the comment
text after it.

// test: no

[source,javascript]
----
var accountBalance = calculateBalance(account);
// It's a green hollow where a river sings
accountBalance.adjust();
// Madly catching white tatters in the grass.
var report = new Report();
// Where the sun on the proud mountain rings:
addToReport(accountBalance, report);
// It's a little valley, foaming like light in a glass.
----

(((block comment)))A `//` comment goes only to the end of the line. A
section of text between `/*` and `*/` will be ignored, regardless of
whether it contains line breaks. This is often useful for adding
blocks of information about a file or a chunk of program.

[source,javascript]
----
/*
 I first found this number scrawled on the back of one of
 my notebooks a few years ago. Since then, it has often
 dropped by, showing up in phone numbers and the serial
 numbers of products that I've bought. It obviously likes
 me, so I've decided to keep it.
*/
var myNumber = 11213;
----

== Summary ==

You now know that a program is built out of statements, which
themselves sometimes contain more statements. Statements tend to
contain expressions, which themselves can be built out of smaller
expressions.

Putting statements after one another gives you a program that is
executed from top to bottom. You can introduce disturbances in the
flow of control by using conditional (`if`, `else`, and `switch`) and
looping (`while`, `do`, and `for`) statements.

Variables can be used to file pieces of data under a name, and they
are useful for tracking state in your program. The environment is the
set of variables that are defined. JavaScript systems
always put a number of useful standard variables into your
environment.

Functions are special values that encapsulate a piece of program. You
can invoke them by writing `functionName(argument1, argument2)`. Such
a function call is an expression, and may produce a value.

== Exercises ==

(((exercises)))If you are unsure how to try your solutions to
exercises, refer to the link:00_intro.html#intro[introduction].

Each exercise starts with a problem description. Read that and try to
solve the exercise. If you run into problems, consider reading the
hints (!interactive after the exercise!)(!book at the link:hints.html#hints[end of the book]!).
Full solutions to the exercises are not included in this
book, but you can find them online at
http://eloquentjavascript.net/code[_eloquentjavascript.net/code_].
If you want to learn something from the exercises, I recommend looking
at the solutions only after you've solved the exercise, or at least
after you've attacked it long and hard enough to have a slight
headache.

=== Looping a triangle ===

(((triangle (exercise))))Write a ((loop)) that makes seven calls to
`console.log` to output the following triangle:

----
#
##
###
####
#####
######
#######
----

It may be useful to know that you can find the length of a string by
writing `.length` after it.

[source,javascript]
----
var abc = "abc";
console.log(abc.length);
// → 3
----

ifdef::interactive_target[]

Most exercises contain a piece of code that you can modify to solve
the exercise. Remember that you can click code blocks to edit them.

[source,javascript]
----
// Your code here.
----
endif::interactive_target[]

!!hint!!

(((triangle (exercise))))You can start with a program that simply
prints out the numbers 1 to 7, which you can derive by making a few
modifications to the
link:02_program_structure.html#loops[even number printing example]
given earlier in the chapter, where the `for` loop was introduced.

Now consider the equivalence between numbers and strings of hash
characters. You can go from 1 to 2 by adding 1 (`+= 1`). You can go
from `"#"` to `"##"` by adding a character (`+= "#"`). Thus, your
solution can closely follow the number-printing program.

!!hint!!

=== FizzBuzz ===

(((FizzBuzz (exercise))))(((loop)))(((conditional execution)))Write a
program that uses `console.log` to print all the numbers from 1 to
100, with two exceptions. For numbers divisible by 3, print `"Fizz"`
instead of the number, and for numbers divisible by 5 (and not 3),
print `"Buzz"` instead.

When you have that working, modify your program to print `"FizzBuzz"`,
for numbers that are divisible by both 3 and 5 (and still print
`"Fizz"` or `"Buzz"` for numbers divisible by only one of those).

(This is actually an ((interview question)) that has been claimed to
weed out a significant percentage of programmer candidates. So if you
solved it, you're now allowed to feel good about yourself.)

ifdef::interactive_target[]
[source,javascript]
----
// Your code here.
----
endif::interactive_target[]

!!hint!!

(((FizzBuzz (exercise))))(((remainder operator)))(((% operator)))Going
over the numbers is clearly a looping job, and selecting what to print
is a matter of conditional execution. Remember the trick of using the
remainder (`%`) operator for checking whether a number is divisible by
another number (has a remainder of zero).

In the first version, there are three possible outcomes for every
number, so you'll have to create an `if`/`else if`/`else` chain.

(((|| operator)))(((if keyword,chaining)))The second version of the
program has a straightforward solution and a clever one. The simple
way is to add another “branch” to precisely test the given condition.
For the clever method, build up a string containing the word or words
to output, and print either this word or the number if there is no
word, potentially by making elegant use of the `||` operator.

!!hint!!

=== Chess board ===

(((chess board (exercise))))(((loop)))(((nesting,of loops)))(((newline
character)))Write a program that creates a string that represents an
8×8 grid, using newline characters to separate lines. At each position
of the grid there is either a space or a “#” character. The characters
should form a chess board.

Passing this string to `console.log` should show something like this:

----
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
----

When you have a program that generates this pattern, define a
((variable)) `size = 8` and change the program so that it works for
any `size`, outputting a grid of the given width and height.

ifdef::interactive_target[]
[source,javascript]
----
// Your code here.
----
endif::interactive_target[]

!!hint!!

(((chess board (exercise))))The string can be built by starting with
an empty one (`""`) and repeatedly adding characters. A newline
character is written `"\n"`.

Use `console.log` to inspect the output of your program.

(((nesting,of loops)))To work with two ((dimensions)), you will need a
((loop)) inside of a loop. Put ((curly braces)) around the bodies of
both loops to make it easy to see where they start and end. Try to
properly indent these bodies. The order of the loops must follow the
order in which we build up the string (line by line, left to right,
top to bottom). So the outer loop handles the lines and the inner loop
handles the characters on a line.

(((counter variable)))(((remainder operator)))(((% operator)))You'll
need two variables to track your progress. To know whether to put a
space or a hash sign at a given position, you could test whether the
sum of the two counters is even (`% 2`).

Terminating a line by adding a newline character happens after the
line has been built up, so do this after the inner loop but inside of
the outer loop.

!!hint!!
