:next_link: 01_values
:load_files: ["code/intro.js"]

= Introducción =

Este libro trata de como hacer que las ((computadoras)) hagan lo que tú quieres
que hagan. Las computadoras son tan comunes como los desarmadores hoy en día,
pero tienen mucha más complejidad oculta y, por lo tanto, son más difíciles de
operar y entender. Para muchos siguen siendo cosas extrañas, un poco amenazadoras.

image::img/generated/computer.png[alt="Comunicándose con una computadora"]

(((interfaz gráfica de usuario)))Hemos encontrado dos formas efectivas
de cerrar la brecha ente nosotros, suaves organismos biológicos
con talento para razonamiento social y espacial, y las computadoras,
manipuladoras sin sentimientos de datos sin sentido. La primera es
usar nuestros sentidos del mundo físico y construir interfaces que
imitan ese mundo y nos permiten manipular figuras en una pantalla
con nuestros dedos. Esto funciona muy bien para interacciones casuales con la máquina.

(((lenguage de programación)))Pero aún no hemos encontrado una buena forma
de usar la interfaz gráfica para comunicar a la computadora cosas que
el diseñador de interfaces no anticipó. Para interfaces abiertas,
como indicarle a la computadora que ejecute tareas arbitrarias,
hemos tenido más suerte con otra estrategia, que hace uso de nuestro
talento para el lenguaje: enseñarle a la computadora uno.

(((lengiajes humanos)))(((expresividad)))Los lenguajes humanos permiten que
palabras y frases se combinen en muchas diferentes formas, lo cuál nos permite
decir una amplia variedad de cosas. Los lenguajes computacionales, aunque son
gramaticalmente menos flexibles, siguen un principio similar.

(((JavaScript,disponibilidad de)))(((computación casual)))La computación casual
se ha extendido mucho en los últimos 20 años, y las interfaces basadas en el lenguaje,
que alguna vez fueron la forma predeterminada en la que las personas interactuaban
con las computadoras, han sido reemplazadas en gran medida por interfaces gráficas.
Pero todavía están ahí, si sabes donde buscar.
Uno de tales lenguajes, JavaScript, está presente en casi todos los ((navegadores
web)) existentes y por lo tanto, disponible en prácticamente todos los dispositivos
de consumo.

indexsee:[navegador web,navegador]Este libro trata de hacer que te familiarices lo
suficiente con este lenguaje para que puedas hacer que la computadora hago lo
que tu quieras.

== Acerca de la Programación ==

[quote, Confucio]
____
(((Confucio)))No ilumino a aquellos que no están deseosos de aprender,
tampoco despierto a quienes no están ansiosos de darse una explicación a
sí mismos. Si les he presentado una esquina del cuadro y ellos no vienen
con las otras tres, no debería recorrer otra vez los puntos.
____

(((programación,dificultad de)))A parte de explicar JavaScript, te introduciré en
los principios básicos de la programación. Programar, resulta, es difícil.
Las reglas fundamentales típicamente son simples y claras.
Pero los programas contruidos sobre esas reglas tienden a volverse
lo suficientemente complejos para introducir sus propias reglas y más
complejidad. En cierta forma, estás construyendo tu propio laberinto y podrías
perderte en él.

(((aprendizaje)))Habrá ocasiones en las que al leer este libro te sentirás
terriblemente frustrado. Si eres nuevo programando, tendrás mucho material nuevo
para digerir. Mucho de este material será después _combinado_ en
formas que requerirán que hagas conexiones adicionales.

Es tu responsabilidad realizar el esfuerzo necesario. Cuando se te haga difícil
seguir este libro, no concluyas rápidamente nada acerca de tus capacidades.
Tu eres bueno—sólo necesitas mantener el paso. Toma un respiro,
vuelve a leer el material, y _siempre_ asegúrate de leer y entender
los programas de ejemplo y los ((ejercicios)). Aprender es un trabajo duro,
pero todo lo que aprendas ahora es tuyo y hará el aprendizaje cada vez más fácil

[quote, Joseph Weizenbaum, Computer Power and Human Reason]
____
(((Weizenbaum+++,+++ Joseph)))El programador de computadoras es el creador de
universos de los cuales él solo es responsable. Universos de complejidad
virtualmente ilimitada pueden ser creados en la forma de programas de computadora.
____

(((programa,naturaleza de un)))(((datos)))Un programa es muchas cosas. Es una
pieza de texto escrita por un programador, es la fuerza que dirije
a la computadora para hacer lo que hace, son datos en la memoria de la
comutadora, y aún así controla las acciones realizadas en esta misma memoria.
Las analogías que tratan de comparar a las computadoras con objetos que conocemos
tienden a quedarse cortas. Una que se ajusta superficialmente es la de
máquina—un montón de piezas separdas que se relacionan, y para hacerlo
functionar, tenemos que considerar las formas en que esas piezas se
interconectan y contribuyen al funcionamiento del todo.

(((computadora)))Una computadora es una máquina que actua como anfitriona de
estas máquinas inmateriales. Las computadoras por sí mismas sólo pueden hacer
cosas estúpidamente simples. La razón por la que son tan poderosas es que hacen
esas cosas a una velocidad increíblemente rápida. Un programa puede combinar
ingeniosamente un número enorme de esas acciones simples para lograr cosas muy
complicadas.

(((progración,lo bueno de)))Para algunos de nosotros, escribir programas de
computadoras es un juego fascinante. Un programa es un construcción del
pensamiento. No tiene costo construirlo, no pesa nada, y crece fácilmente bajo
nuestras manos tecleando.

Pero si no tenemos cuidado, el tamaño y la ((complejidad)) de un programa
se saldrán de control, confundiendo incluso a la persona que lo creó.
Mantener los programas bajo control es el principal problema de la programación.
Cuando funcionan, es hermoso. El Arte de Programar es la habilidad de
controlar la complejidad. Un gran programa está dominado, hecho simple
en su complejidad.

(((estilo de programación)))(((mejores prácticas)))Muchos programadores creen
que esta complejidad es mejor controlada usando un pequeño conjunto de
técnicas bien entendidas en sus programas. Estos han compuesto reglas estrictas
(“mejores prácticas”) que prescriben la forma que los programas deberían
tener, y los más celosos de ellos considerarán a aquellos que se salen de
esta pequeña zona segura como _malos_ programadores.

(((experimentar)))(((aprender)))¡Qué hostilidad hacia la riqueza de la
programación, la de tratar de reducirla a algo simple y predecible, tratar de
crear un tabú en todos los programas extraños y bellos!
El panorama de todas las técnicas de programación es enorme, fascinante en
su diversidad, y permanece inexplorado en gran parte. Ciertamente es peligroso
ir, porque seduce al programador novato con todo tipo de confusiones,
pero eso sólo significa que debes de andar con cuidado y estar alerta.
Conforme vayas aprendiendo, siempre habrá nuevos retos y nuevo territorio por
explorar. Los programadores que se nieguen a explorar dejarán de progresar,
olvidarán su alegría, y se aburrirán con su trabajo.

== Por qué el lenguaje importa ==

(((lenguaje de programación)))(((código máquina)))(((datos binarios)))En el
principio, cuando nació la computación, no había lenguajes de programación.
Los progrmas lucían algo así:

----
00110001 00000000 00000000
00110001 00000001 00000001
00110011 00000001 00000010
01010001 00001011 00000010
00100010 00000010 00001000
01000011 00000001 00000000
01000001 00000001 00000001
00010000 00000010 00000000
01100010 00000000 00000000
----

(((programación,historia de)))(((tarjeta perforada)))(((complejidad)))Eso es un
programa para sumar los números del 1 al 10 e imprimir el
resultado: `1 + 2 + ... + 10 = 55`. Podría correr en una simple,
hipotética máquina. Para programar las primeras computadoras, era necesario
configurar grandes conjuntos de tiras de switches en la posición correcta o
perforar tiras de tarjetas e introducirlas en la computadora.
Probablemente te puedes imaginar cuan tedioso y propenso al error era este
procedimiento. Incluso escrbibir programas simples requería gran inteligencia y
disciplina. Los programas complejos eran casi inconcebibles.

(((bit)))(((mago (poderoso))))Claro, introducir manualmente estos
oscuros patrones de bits (los unos y ceros) dieron al progrmador
un profundo sentimiento de ser un poderoso mago. Y eso ha valido algo en
términos de satisfacción en el trabajo.

(((memoria)))(((instrucción)))Cada línea del programa anterior contiene una
instrucción. Podría ser escrita en español como sigue:

[source,text/plain]
----
1. Guarda el número 0 en la locación de memoria 0.
2. Guarda el número 1 en la locación de memoria 1.
3. Guarda el valor de la locación de memoria 1 en la locación 2.
4. Resta 11 del valor en la locación de meoria 2.
5. Si el valor en la locación de memoria 2 es el número 0,
   continua con la instrucción 9.
6. Suma el valor de la locación de memoria 1 al valor de la
   locación de memoria 0.
7. Suma 1 al valor de la locación de memoria 1.
8. Continua con la instrucción 3.
9. Devuelve el valor de la locación de memoria 0.
----

(((legibilidad)))(((nombramiento)))(((variable)))Aunque eso es más leíble que
una sopa de bits, sigue sin ser agradable. Podría ayudar usar nombres en números
para las instrucciones y locaciones de memoria.

[source,text/plain]
----
 Pon “total” igual a 0.
 Pon “conteo” igual a 1.
[bucle]
 Pon “comparación” igual a “conteo”.
 Resta 11 de “comparación”.
 Si “comparación” es cero, continua en [final].
 Suma “conteo” a “total”.
 Suma 1 a “conteo”.
 Continua en [bucle].
[final]
 Devuelve “total”.
----

(((bucle)))(((salto)))(((ejemplo de sumatoria)))¿Puedes entender cómo funciona
el programa en este punto? Las primeras dos línas ponen en dos locaciones de
memoria sus valores iniciales: `total` será usado para construir el resultado
del cálculo y `conteo` mantendrá el registro del número en el que estamos
trabajando en este momento. Las líneas que usan `comparación` son probablemente
las más raras. El programa quiere ver si `conteo` es igual a 11 para saber si
puede terminar. A causa de que nuestra máquina hipotética es más bien primitiva,
solo puede probar si un número es cero y tomar una decisión (o salto) basada
en eso. Así que usa la locación de memoria etiquetada como `comparación` para
calcular el valor de `conteo - 11` y toma una decisión basada en ese valor.
Las próximas dos líneas suman el valor de `conteo` al resultado e incrementan
`conteo` en 1 cada vez que el programa ha decido que `conteo` no es todavía 11.

Este es el mismo programa en JavaScript:

[source,javascript]
----
var total = 0, conteo = 1;
while (conteo <= 10) {
  total += conteo;
  conteo += 1;
}
console.log(total);
// → 55
----

(((bucle while)))(((bucle)))Esta versión nos da unas cuantas menjoras más.
Y lo más importante es que ya no hay necesidad de especificar la forma en que
queremos que nuestro programa salte de atrás para adelante. La construcción del
lenguaje `while` se encarga de eso. Continua ejecutándo el bloque (dentro de las
llaves) debajo de él mientras la condición que se le dio se mantenga. Esa
condición es `conteo <= 10`, lo que significa "++conteo++ es menor o igual que 10"
Ya no tenemos que crear un valor temporal y compararlo con 0, lo cuál era un
detalle sin interés para nosotros. Parte del poder de los lenguajes de
programación es que estos se encargan de los detalles que no nos interesan.

(((console.log)))Al final del programa, después de que la construcción `while`
ha terminado, la operación `console.log` es aplicada al resultado para imprimirlo
como resultado.

(((sum, función)))(((range, función)))(((abstracción)))(((función)))Finalmente,
así es como el programa luciría si sucidiera que tenemos
las convenientes operaciones `range` y `sum` disponibles, una crea una
((colección)) de números dentro de un rango y la otra calcula la suma de
una ((colección)) de números, respectivamente:

// start_code

[source,javascript]
----
console.log(sum(range(1, 10)));
// → 55
----

(((legibilidad)))La moraleja de esta historia es que el mismo programa puede
ser expresado en formas largas, cortas, legibles e ilegibles.
La primera versión del programa era extremadamente difícil de entender, mientras
que la última está casi en lenguaje humano, inglés: `log`(registra) la
`sum`(suma) del `rango` de números del 1 al 10.
(Veremos en link:04_data.html#data[capítulos posteriores] como construir
operaciones como `sum` y `range`.)

(((lenguaje de programación,poder de)))(((composición)))Un buen lenguaje de
programación ayuda al programador mediante permitirle hablar acerca de las
acciones que la computadora tiene que realizar en un nivel más alto.
Ayuda a omitir detalles que no nos interesan, provee convenientes
bloques de  construcción (tales como `while` y `console.log`), y te permite
definir tus propios bloques (como `sum` y `range`), y hace fácil componer esos
bloques.

== ¿Qué es JavaScript? ==

indexsee:[WWW,World Wide Web] indexsee:[Web,World Wide Web](((hisotria)))(((Netscape)))(((browser)))(((web
application)))(((JavaScript)))(((JavaScript,history of)))(((World Wide
Web))) JavaScript was introduced in 1995 as a way to add programs to
web pages in the Netscape Navigator browser. The language has since
been adopted by all other major graphical web browsers. It has made modern
web applications possible—applications with which you can interact
directly, without doing a page reload for every action. But it is also used in more
traditional websites to provide various forms of interactivity and
cleverness.

(((Java)))(((naming)))It is important to note that JavaScript has
almost nothing to do with the programming language named Java. The
similar name was inspired by marketing considerations, rather than
good judgment. When JavaScript was being introduced, the Java language
was being heavily marketed and was gaining popularity. Someone
thought it was a good idea to try to ride along on this success. Now we
are stuck with the name.

(((ECMAScript)))(((compatibility)))After its adoption outside of
Netscape, a ((standard)) document was written to describe the way the
JavaScript language should work to make sure the various pieces of
software that claimed to support JavaScript were actually talking
about the same language. This is called the ECMAScript standard, after
the Ecma International organization that did the standardization. In
practice, the terms ECMAScript and JavaScript can be used interchangeably—they
are two names for the same language.

(((JavaScript,weaknesses of)))(((debugging)))There are those who will
say _terrible_ things about the JavaScript language. Many of these
things are true. When I was required to write something in JavaScript
for the first time, I quickly came to despise it. It would accept
almost anything I typed but interpret it in a way that was completely
different from what I meant. This had a lot to do with the fact that I
did not have a clue what I was doing, of course, but there is a real
issue here: JavaScript is ridiculously liberal in what it allows. The
idea behind this design was that it would make programming in
JavaScript easier for beginners. In actuality, it mostly makes finding
problems in your programs harder because the system will not point
them out to you.

(((JavaScript,flexibility of)))(((flexibility)))This flexibility also
has its advantages, though. It leaves space for a lot of techniques
that are impossible in more rigid languages, and as you will see (for
example in link:10_modules.html#modules[Chapter 10]) it
can be used to overcome some of JavaScript's shortcomings. After
((learning)) the language properly and working with it for a while, I have
learned to actually _like_ JavaScript.

(((future)))(((JavaScript,versions of)))(((ECMAScript)))(((ECMAScript
6)))There have been several versions of JavaScript. ECMAScript
version 3 was the widely supported version in the time of
JavaScript's ascent to dominance, roughly between 2000 and 2010.
During this time, work was underway on an ambitious version 4, which
planned a number of radical improvements and extensions to the
language. Changing a living, widely used language in such a radical
way turned out to be politically difficult, and work on the version 4
was abandoned in 2008, leading to the much less ambitious version 5
coming out in 2009. We're now at the point where all major
browsers support version 5, which is the language version that
this book will be focusing on. A version 6 is in the process of
being finalized, and some browsers are starting to support new
features from this version.

(((JavaScript,uses of)))Web browsers are not the only platforms on
which JavaScript is used. Some databases, such as MongoDB and CouchDB,
use JavaScript as their scripting and query language. Several
platforms for desktop and server programming, most notably the
((Node.js)) project (the subject of link:20_node.html#node[Chapter
20]) are providing a powerful environment for programming JavaScript
outside of the browser.

== Code, and what to do with it ==

(((reading code)))(((writing code)))Code is the text that makes up
programs. Most chapters in this book contain quite a lot of it. In my
experience, reading code and writing ((code)) are indispensable parts of
((learning)) to program, so try to not just glance over the examples. Read
them attentively and understand them. This may be slow and confusing
at first, but I promise that you will quickly get the hang of it. The
same goes for the ((exercises)). Don't assume you understand them
until you've actually written a working solution.

(((interpretation)))I recommend you try your solutions to exercises
in an actual JavaScript interpreter. That way, you'll get immediate feedback on
whether what you are doing is working, and, I hope, you'll be
tempted to ((experiment)) and go beyond the exercises.

ifdef::interactive_target[]

When reading this book in your browser, you can edit (and run) all
example programs by clicking them.

endif::interactive_target[]

ifdef::book_target[]

(((download)))(((sandbox)))(((running code)))The easiest way to run
the example code in the book, and to experiment with it, is to look it
up in the online version of the book at
http://eloquentjavascript.net/[_eloquentjavascript.net_]. There, you
can click any code example to edit and run it and to see the
output it produces. To work on the exercises, go to
http://eloquentjavascript.net/code[_eloquentjavascript.net/code_],
which provides starting code for each coding exercise and allows you
to look at the solutions.

endif::book_target[]

(((developer tools)))(((JavaScript console)))If you want to run the
programs defined in this book outside of the book's sandbox, some care
is required. Many examples stand on their own and should work in any
JavaScript environment. But code in later chapters is mostly written
for a specific environment (the browser or Node.js) and can run only
there. In addition, many chapters define bigger programs, and the
pieces of code that appear in them depend on each other or on external
files. The http://eloquentjavascript.net/code[sandbox] on the website
provides links to Zip files containing all of the scripts and data
files necessary to run the code for a given chapter.

== Overview of this book ==

This book contains roughly three parts. The first 11 chapters discuss
the JavaScript language itself. The next eight chapters are about web
((browsers)) and the way JavaScript is used to program them. Finally,
two chapters are devoted to ((Node.js)), another environment to program
JavaScript in.

Throughout the book, there are five _project chapters_, which describe
larger example programs to give you a taste of real programming. In
order of appearance, we will work through building an
link:07_elife.html#elife[artificial life simulation], a
link:11_language.html#language[programming language], a
link:15_game.html#game[platform game], a
link:19_paint.html#paint[paint program], and a
link:21_skillsharing.html#skillsharing[dynamic website].

The language part of the book starts with four chapters to introduce
the basic structure of the JavaScript language. They introduce
link:02_program_structure.html#program_structure[control structures]
(such as the `while` word you saw in this introduction),
link:03_functions.html#functions[functions] (writing your own
operations), and link:04_data.html#data[data structures]. After these,
you will be able to write simple programs. Next, Chapters
link:05_higher_order.html#higher_order[5] and
link:06_object.html#object[6] introduce techniques to use functions
and objects to write more _abstract_ code and thus keep complexity
under control.

After a link:07_elife.html#elife[first project chapter], the first
part of the book continues with chapters on
link:08_error.html#error[error handling and fixing], on
link:09_regexp.html#regexp[regular expressions] (an important tool for
working with text data), and on
link:10_modules.html#modules[modularity]—another weapon against
complexity. The link:11_language.html#language[second project chapter]
concludes the first part of the book.

The second part, Chapters link:12_browser.html#browser[12] to
link:19_paint.html#paint[19], describes the tools that browser
JavaScript has access to. You'll learn to display things on the screen
(Chapters link:13_dom.html#dom[13] and
link:16_canvas.html#canvas[16]), respond to user input (Chapters
link:14_event.html#event[14] and link:18_forms.html#forms[18]), and
communicate over the network (link:17_http.html#http[Chapter 17]).
There are again two project chapters in this part.

After that, link:20_node.html#node[Chapter 20] describes Node.js, and
link:21_skillsharing.html#skillsharing[Chapter 21] builds a simple web
system using that tool.

ifdef::commercial_target[]

Finally, link:22_fast.html#fast[Chapter 22] describes some of the
considerations that come up when optimizing JavaScript programs for
speed.

endif::commercial_target[]

== Typographic conventions ==

(((factorial function)))In this book, text written in a `monospaced`
font will represent elements of programs—sometimes
they are self-sufficient fragments, and sometimes they just refer to
part of a nearby program. Programs (of which you have already seen a
few), are written as follows:

[source,javascript]
----
function fac(n) {
  if (n == 0)
    return 1;
  else
    return fac(n - 1) * n;
}
----

(((console.log)))Sometimes, in order to show the output that a program
produces, the expected output is written after it, with two slashes
and an arrow in front.

[source,javascript]
----
console.log(fac(8));
// → 40320
----

Good luck!
