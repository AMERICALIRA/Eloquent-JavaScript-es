:chap_num: 1
:prev_link: 00_intro
:next_link: 02_program_structure
:docid: values

= Valores, Tipos y Operadores =

[chapterquote="true"]
[quote, Master Yuan-Ma, The Book of Programming]
____
Debajo de la superficie de la
máquina, el programa se mueve. Sin esfuerzo, se expande y contrae.
En gran armonía, los electrones se separan y reagrupan. Las formas en
el monitor no son más que ondas en el agua. La escencia permanece
invisible debajo.
____

(((Yuan-Ma)))(((Libro de la Programación)))(((datos
binarios)))(((datos)))(((bit)))(((memoria))) En el mundo de las
computadoras sólo existen los datos. Puedes leer, modificar y crear
nuevos datos, pero culaquier cosa que no sea datos simplemente no 
existe. Todos estos datos son guardados en largas secuencias de bits
y por lo tanto son parecidos.

(((CD)))(((señal))) Los bits son cualquier tipo de cosas con dos valores,
normalmente descritos como ceros y unos. Dentro de la computadora, toman
formas como alta o baja carga eléctrica, una señal débil o fuerte, o
un punto brillante u opaco en la superficie de un CD. Cualquier pieza
de información discreta puede ser reducida a una secuencia de ceros y
unos y por lo tanto representada como bits.

(((número binario)))(((base)))(((número décimal))) Por ejemplo, piensa
cómo podrías representar el número 13 en bits. Funciona de la misma
forma en que escribes números decimales, pero en vez de tener 10
((dígitos)), tienes sólo 2, y el peso de cada uno se incrementa
por un factor de 2 de derecha a izquierda. Aquí están los bits que
conforman el número 13, con los pesos de cada uno mostrados debajo de
ellos.

----
   0   0   0   0   1   1   0   1
 128  64  32  16   8   4   2   1
----

Así que ese es el número binario 00001101, u 8 + 4 + 1,
que equivale a 13.

== Valores ==

(((memoria)))(((alamacenamiento de datos volátil)))(((disco duro)))Imagina
un mar de bits. Un océano de estos. Una computadora moderna típica
tiene más de 30 mil millones de bits en su almacenamiento de datos
volátil. El almacenamiento no volátil (el disco duro o su equivalente)
tiene un par de órdenes de magnitud más todavía.


image::img/bit-sea.png[alt="The Ocean of Bits"]

Para ser capaces con tales cantidades de bits sin perderte, puedes
separarlos en pedazos que representen piezas de información. En un
entorno en JavaScript, esos pedazos son llamados _((valor))es_. Aunque
todos los valores están hechos de bits, juegan diferentes roles. Cada
valor tiene un tipo que determina su rol. Existen seis tipos básicos de
valores en JavaScript: números, cadenas, Booleanos, objetos, funciones,
y valores indefinidos.

(((recolección de basura)))Para crear un valor, sólo tienes que invocar
su nombre. Esto es conveniente. No tienes que reuinir el material de
construcción de tus valores o pagar por ellos. Sólo llamas uno y _woosh_,
lo tienes. No son creados de la nada, por supuesto. Cada valor tiene que
estar almacenado en algún lugar, y si quieres usar una cantidad enorme 
de estos al mismo tiempo, te podrías quedar sin bits. Afortunadamente,
esto se convierte en un problema sólamente si los necesitas todos al 
mismo tiempo. Tan pronto como dejes de usar un valor se disipará, dejando
sus bits para que sean reciclados como material de construcción de la
próxima generación de valores.

Este capítulo introduce los elementos atómicos de los programas en 
JavaScript, los tipos de valor simples y los operadores que pueden 
actuar sobre tales valores.

== Números ==

(((sintaxis)))(((número)))(((número,notación)))Los valores de tipo
_número_(number) son, sin sorpresa alguna, valores numéricos.
En un programa en JavaScript, se escriben de la siguiente forma:

[source,javascript]
----
13
----

(((número binario))) Usa eso en un programa y causará que el patrón de
bits para el número 13 exista dentro de la memoria de la computadora.

(((número,representación)))(((bit)))JavaScript usa una cantidad fija
de bits, 64, para guardar un valor del tipo número. Existe un límite
en la cantidad de patrones que se pueden hacer con 64 bits, lo que 
significa que la cantidad de números que puedes representar también es
limitada. Para _N_ ((dígito))s decimales, la cantidad de números que
pueden ser representados es 10^_N_^. Similarmente, dados 64 dígitos
binarios, puedes representar 2^64^ números diferentes, que es cerca de
18 cuatrillones (un 18 con 18 ceros después). Eso es mucho.

La memoria de la computadora solía ser mucho más pequeña, y la gente 
tendía a usar grupos de 8 ó 16 bits para representar sus números. Era
fácil _((desbordar))_ accidentalmente números tan pequeños: terminar 
con un número que no pudiera ser almacenado en el número dado de bits. Hoy,
incluso las computadoras personales tienen mucha memoria, así
que eres libre de usar grupos de 64 bits, lo que significa que
necesitas preocuparte del desbordamiento sólo cuando estés
tratando con números verdaderamente astronómicos.

(((signo)))(((número de punto flotante)))(((número fraccionario)))(((bit de signo)))No
todos los número enteros debajo de 18 cuatrillones caben en un número
de JavaScript. Esos bits también guardan números negativos, así
que un bit indica el signo del número. Un problema mayor es que 
los números no enteros también deben ser representados. Para hacer esto,
algunos de los bits son usados para guardar la posición del punto decimal.
El número entero máximo real que puede ser guardado está más cerca del rango de
los 9 trillones (15 ceros), que aún es satisfactoriamente grande.

(((number,notación)))Los números fraccionarios son escritos usando un punto.

[source,javascript]
----
9.81
----

(((exponente)))(((notación científica)))(((número,notación)))Para números
muy grandes o muy pequeños, también se puede usar la notación
científica, añadiendo una "e" de "exponente", seguido por el exponente
del número:

[source,javascript]
----
2.998e8
----

Esto es 2.998 × 10^8^ = 299,800,000.

(((pi)))(((número, precisión de)))(((número de punto flotante)))Calculos con 
números enteros (en inglés llamados _((integer))_) más pequeños que el supracitado
9 trillones, están garantizados para siempre ser precisos. Desafortunadamente,
cálculos con números fraccionarios generalmente no lo son. Justo como π (pi)
no puede ser expresado precisamente por un número finito de dígitos decimales,
muchos números pierden algo de precisión cuando sólo hay 64 bits disponibles
para guardarlos. Esto es una pena, pero causa problemas prácticos sólo en
algunas situaciones específicas. Lo importante es estar al tanto de
esto y tratar a los números digitales fraccionarios como aproximaciones
y no como valores precisos.

=== Aritmética ===

(((sintaxis)))(((operador)))(((operador
binario)))(((aritmética)))(((adición)))(((multiplicación)))Lo principal que
se hace con los números es la aritmética. Las operaciones aritméticas
como la suma o la multiplicación toman dos valores y producen uno
nuevo a partir de estos. Así es como lucen e JavaScript:

[source,javascript]
----
100 + 4 * 11
----

(((operador,applicación)))(((asterisco)))(((símbolo
más)))(((operador pass:[*])))(((operador +))) Los símbolos `+` y `*`
son llamados _operadores_. El primero representa la suma y el segundo
la multiplicación. Al poner un operador entre dos valores, se 
aplicará la operación a esos valores y producirá un nuevo valor.

(((agrupamiento)))(((paréntesis)))(((precedencia)))¿Significa el ejemplo
anterior: "suma 4 y 100, y multitplica el resultado por 11", o es la
multiplicación ralizada antes de hacer la suma? Como pudiste haber adivinado,
la multiplicación ocurre primero. Pero como en matemáticas, puedes cambiar
esto mediante encerrar en paréntesis la suma.

[source,javascript]
----
(100 + 4) * 11
----

(((caracter guión)))(((diagonal
)))(((división)))(((resta)))(((menos)))(((operador
-)))(((operador /)))Para la resta existe el operador `-`,
y la división se puede hacer con el operador `/`.

Cuando los operadores aparecen juntos sin paréntesis, el order en el que
son aplicados es determinado por su _((precedencia))_. El ejemplo muestra
que la multiplicación se aplica antes que la suma. El operador `/` tiene 
la misma precedencia que `*`. De igual forma pasa con `+` y `-`. Cuando
varios operadores con la misma precedencia aparecen juntos, como en
`1 - 2 + 1`, son aplicados de izquierda a derecha: `(1 - 2) + 1`. 

Estas reglas de precedencia son algo de lo que no te deberías
de preocupar. Cuando tengas duda, simplemente agrega paréntesis.

(((operador módulo)))(((división)))(((operador sobrante)))(((operador
%)))Existe un operador aritmético más, que podrías no reconocer
inmediatamente. El símbolo `%` es usado para representar la 
operación _sobrante_. `X % Y` es el sobrante de dividir `X` entre 
`Y`. Por ejemplo, `314 % 100` produce `14`, y `144 % 12` da `0`.
La precedencia del sobrante es la misma que la de la multiplicación
y división. Verás a menudo este operador referido como _módulo_, 
aunque técnicamente _sobrante_ es más preciso.

=== Números especiales ===

(((número,valores especiales)))Hay 3 valores especiales en JavaScript
que son considerados números pero no se comportanc como números
normales.

(((infinito)))El primero es `Infinity` (Infinito) y `-Infinity`, que
representan infinitos positivos y negativos. `Infinity - 1`
sigue siendo `Infinity`, y así por el estilo. No confíes mucho en los
cálculos basados en infinitos. No son matemáticamente confiables y
pronto te llevarán al próximo número especial: `NaN`.

(((NaN)))(((not a number)))(((divisón por cero)))`NaN` son las siglas
de “not a number” ("no es un número"), aunque es un valor del tipo
número. Obtendrás este resultado cuando, por ejemplo, trates de
calcular `0 / 0` (cero entre cero), `Infinity - Infinity`, o cualquier
otra operación numérica que no produzca un resultado
preciso, significativo.

== Strings ==

(((syntax)))(((text)))(((character)))(((string,notation)))(((single-quote
character)))(((double-quote character)))(((quotation mark)))The next
basic data type is the _((string))_. Strings are used to represent
text. They are written by enclosing their content in quotes.

[source,javascript]
----
"Patch my boat with chewing gum"
'Monkeys wave goodbye'
----

Both single and double quotes can be used to mark strings as long as
the quotes at the start and the end of the string match.

(((line break)))(((newline character)))Almost anything can be put
between quotes, and JavaScript will make a string value out of it. But
a few characters are more difficult. You can imagine how putting
quotes between quotes might be hard. _Newlines_ (the characters you
get when you press Enter) also can't be put between quotes. The string
has to stay on a single line.

(((escaping,in strings)))(((backslash character)))To make it possible to include
such characters in a string, the following notation is used: whenever
a backslash (`\`) is found inside quoted text, it indicates that the
character after it has a special meaning. This is called _escaping_
the character. A quote that is preceded by a backslash will not end
the string but be part of it. When an `n` character occurs after a
backslash, it is interpreted as a newline. Similarly, a `t` after a
backslash means a ((tab character)). Take the following string:

[source,javascript]
----
"This is the first line\nAnd this is the second"
----

The actual text contained is this:

----
This is the first line
And this is the second
----

There are, of course, situations where you want a backslash in a
string to be just a backslash, not a special code. If two backslashes
follow each other, they will collapse together, and only one will be
left in the resulting string value. This is how the string “++A newline
character is written like "\n".++” can be expressed:

[source,javascript]
----
"A newline character is written like \"\\n\"."
----

(((+ operator)))(((concatenation)))Strings cannot be divided,
multiplied, or subtracted, but the `+` operator _can_ be used on them.
It does not add, but it __concatenates__—it glues two strings together.
The following line will produce the string `"concatenate"`:

[source,javascript]
----
"con" + "cat" + "e" + "nate"
----

There are more ways of manipulating strings, which we will discuss
when we get to methods in link:04_data.html#methods[Chapter 4].

== Unary operators ==

(((operator)))(((typeof operator)))(((type)))Not all operators are
symbols. Some are written as words. One example is the `typeof`
operator, which produces a string value naming the type of the value
you give it.

[source,javascript]
----
console.log(typeof 4.5)
// → number
console.log(typeof "x")
// → string
----

[[console.log]]

(((console.log)))(((output)))(((JavaScript console)))We will use
`console.log` in example code to indicate that we want to see the
result of evaluating something. When you run such code, the value
produced should be shown on the screen, though how it appears will
depend on the JavaScript environment you use to run it.

(((negation)))(((- operator)))(((binary operator)))(((unary
operator)))The other operators we saw all operated on two values, but
`typeof` takes only one. Operators that use two values are called
_binary_ operators, while those that take one are called _unary_
operators. The minus operator can be used both as a binary operator
and as a unary operator.

[source,javascript]
----
console.log(- (10 - 2))
// → -8
----

== Boolean values ==

(((Boolean)))(((operator)))(((true)))(((false)))(((bit)))Often,
you will need a value that simply distinguishes between two
possibilities, like “yes” and “no” or “on” and “off”. For this,
JavaScript has a _Boolean_ type, which has just two values: true and
false (which are written simply as those words).

=== Comparisons ===

(((comparison)))Here is one way to produce Boolean values:

[source,javascript]
----
console.log(3 > 2)
// → true
console.log(3 < 2)
// → false
----

(((comparison,of numbers)))(((> operator)))(((< operator)))(((greater
than)))(((less than)))The `>` and `<` signs are the traditional
symbols for “is greater than” and “is less than”, respectively. They
are binary operators. Applying them results in a Boolean value that
indicates whether they hold true in this case.

Strings can be compared in the same way.

[source,javascript]
----
console.log("Aardvark" < "Zoroaster")
// → true
----

(((comparison,of strings)))The way strings are ordered is more or less
alphabetic: uppercase letters are always “less” than lowercase ones,
so `"Z" < "a"` is true, and non-alphabetic characters (!, -, and so on)
are also included in the ordering. The actual comparison is based on
the _((Unicode))_ standard. This standard assigns a number to
virtually every character you would ever need, including characters
from Greek, Arabic, Japanese, Tamil, and so on. Having such numbers is
useful for storing strings inside a computer because it makes it
possible to represent them as a sequence of numbers. When comparing
strings, JavaScript goes over them from left to right, comparing the
numeric codes of the characters one by one.

(((equality)))(((>= operator)))(((pass:[<=] operator)))(((==
operator)))(((!= operator)))Other similar operators are `>=` (greater
than or equal to), `<=` (less than or equal to), `==` (equal to), and
`!=` (not equal to).

[source,javascript]
----
console.log("Itchy" != "Scratchy")
// → true
----

(((comparison,of NaN)))(((NaN)))There is only one value in JavaScript
that is not equal to itself, and that is `NaN`, which stands for “not
a number”.

[source,javascript]
----
console.log(NaN == NaN)
// → false
----

`NaN` is supposed to denote the result of a nonsensical computation,
and as such, it isn't equal to the result of any _other_ nonsensical
computations.

=== Logical operators ===

(((reasoning)))(((logical operators)))There are also some operations
that can be applied to Boolean values themselves. JavaScript supports
three logical operators: _and_, _or_, and _not_. These can be used to
“reason” about Booleans.

(((&& operator)))(((logical and)))The `&&` operator represents logical
_and_. It is a binary operator, and its result is true only if both
the values given to it are true.

[source,javascript]
----
console.log(true && false)
// → false
console.log(true && true)
// → true
----

(((|| operator)))(((logical or)))The `||` operator denotes logical
_or_. It produces true if either of the values given to it is true.

[source,javascript]
----
console.log(false || true)
// → true
console.log(false || false)
// → false
----

(((negation)))(((! operator)))_Not_ is written as an exclamation mark
(`!`). It is a unary operator that flips the value given to it—`!true`
produces `false` and `!false` gives `true`.

(((precedence)))When mixing these Boolean operators with arithmetic
and other operators, it is not always obvious when parentheses are
needed. In practice, you can usually get by with knowing that of the
operators we have seen so far, `||` has the lowest precedence, then
comes `&&`, then the comparison operators (`>`, `==`, and so on), and
then the rest. This order has been chosen such that, in typical
expressions like the following one, as few parentheses as possible are
necessary:

[source,javascript]
----
1 + 1 == 2 && 10 * 10 > 50
----

(((conditional execution)))(((ternary operator)))(((?:
operator)))(((conditional operator)))(((colon character)))(((question
mark)))The last logical operator I will discuss is not unary, not
binary, but _ternary_, operating on three values. It is written with a
question mark and a colon, like this:

[source,javascript]
----
console.log(true ? 1 : 2);
// → 1
console.log(false ? 1 : 2);
// → 2
----

This one is called the _conditional_ operator (or sometimes just
_ternary_ operator since it is the only such operator in the
language). The value on the left of the question mark “picks” which of
the other two values will come out. When it is true, the middle value
is chosen, and when it is false, the value on the right comes out.

== Undefined values ==

(((undefined)))(((null)))There are two special values, written `null`
and `undefined`, that are used to denote the absence of a meaningful
value. They are themselves values, but they carry no
information.

Many operations in the language that don't produce a meaningful value
(you'll see some later) yield `undefined` simply because they have to
yield _some_ value.

The difference in meaning between `undefined` and `null` is an accident
of JavaScript's design, and it doesn't matter most of the time. In the cases
where you actually have to concern yourself with these values, I
recommend treating them as interchangeable (more on that in a moment).

== Automatic type conversion ==

(((NaN)))(((type coercion)))In the introduction, I mentioned that
JavaScript goes out of its way to accept almost any program you give
it, even programs that do odd things. This is nicely demonstrated by
the following expressions:

[source,javascript]
----
console.log(8 * null)
// → 0
console.log("5" - 1)
// → 4
console.log("5" + 1)
// → 51
console.log("five" * 2)
// → NaN
console.log(false == 0)
// → true
----

(((+ operator)))(((arithmetic)))(((pass:[*] operator)))(((-
operator)))When an operator is applied to the “wrong” type of value,
JavaScript will quietly convert that value to the type it wants, using
a set of rules that often aren't what you want or expect. This is
called _((type coercion))_. So the `null` in the first expression becomes
`0`, and the `"5"` in the second expression becomes `5` (from string
to number). Yet in the third expression, `+` tries string
concatenation before numeric addition, so the `1` is converted to
`"1"` (from number to string).

(((type coercion)))(((number,conversion to)))When something that
doesn't map to a number in an obvious way (such as `"five"` or
`undefined`) is converted to a number, the value `NaN` is produced.
Further arithmetic operations on `NaN` keep producing `NaN`, so if you
find yourself getting one of those in an unexpected place, look for
accidental type conversions.

(((null)))(((undefined)))(((comparison,of undefined values)))(((==
operator)))When comparing values of the same type using `==`, the
outcome is easy to predict: you should get true when both values are
the same, except in the case of `NaN`. But when the types differ,
JavaScript uses a complicated and confusing set of rules to determine
what to do. In most cases, it just tries to convert one of the values
to the other value's type. However, when `null` or `undefined` occurs
on either side of the operator, it produces true only if both sides
are one of `null` or `undefined`.

[source,javascript]
----
console.log(null == undefined);
// → true
console.log(null == 0);
// → false
----

That last piece of behavior is often useful. When you want to test
whether a value has a real value instead of `null` or `undefined`, you
can simply compare it to `null` with the `==` (or `!=`) operator.

(((type coercion)))(((Boolean,conversion to)))(((=== operator)))(((!==
operator)))(((comparison)))But what if you want to test whether
something refers to the precise value `false`? The rules for
converting strings and numbers to Boolean values state that `0`,
`NaN`, and the empty string (`""`) count as `false`, while all the
other values count as `true`. Because of this, expressions like `0 ==
false` and `"" == false` are also true. For cases like this, where you
do _not_ want any automatic type conversions to happen, there are two
extra operators: `===` and `!==`. The first tests whether a value is
precisely equal to the other, and the second tests whether it is not
precisely equal. So `"" === false` is false as expected.

I recommend using the three-character comparison operators defensively to
prevent unexpected type conversions from tripping you up. But when you're
certain the types on both sides will be the same, there is no problem with
using the shorter operators.

=== Short-circuiting of logical operators ===

(((type coercion)))(((Boolean,conversion to)))(((operator)))The
logical operators `&&` and `||` handle values of different types in a
peculiar way. They will convert the value on their left side to
Boolean type in order to decide what to do, but depending on the
operator and the result of that conversion, they return either the
_original_ left-hand value or the right-hand value.

(((|| operator)))The `||` operator, for example, will return the value
to its left when that can be converted to true and will return the
value on its right otherwise. This conversion works as you'd expect
for Boolean values and should do something analogous for values of
other types.

[source,javascript]
----
console.log(null || "user")
// → user
console.log("Karl" || "user")
// → Karl
----

(((default value)))This functionality allows the `||` operator to be
used as a way to fall back on a default value. If you give it an
expression that might produce an empty value on the left, the value on
the right will be used as a replacement in that case.

(((&& operator)))The `&&` operator works similarly, but the other way
around. When the value to its left is something that converts to
false, it returns that value, and otherwise it returns the value on
its right.

(((short-circuit evaluation)))Another important property of these two
operators is that the expression to their right is evaluated only when
necessary. In the case of `true || X`, no matter what `X` is—even if
it's an expression that does something __terrible__—the result will be
true, and `X` is never evaluated. The same goes for `false && X`,
which is false and will ignore `X`. This is called _short-circuit
evaluation_.

(((ternary operator)))(((?: operator)))(((conditional operator)))The
conditional operator works in a similar way. The first expression is
always evaluated, but the second or third value, the one that is not
picked, is not.

== Summary ==

We looked at four types of JavaScript values in this chapter: numbers,
strings, Booleans, and undefined values.

Such values are created by typing in their name (`true`, `null`) or
value (`13`, `"abc"`). You can combine and transform values with
operators. We saw binary operators for arithmetic (`+`, `-`, `*`, `/`,
and `%`), string concatenation (`+`), comparison (`==`, `!=`, `===`,
`!==`, `<`, `>`, `<=`, `>=`), and logic (`&&`, `||`), as well as
several unary operators (`-` to negate a number, `!` to negate
logically, and `typeof` to find a value's type) and a ternary
operator (`?:`) to pick one of two values based on a third value.

This gives you enough information to use JavaScript as a pocket
calculator, but not much more. The
link:02_program_structure.html#program_structure[next chapter] will
start tying these expressions together into basic programs.
